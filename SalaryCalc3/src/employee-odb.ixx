// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

namespace odb
{
  // position
  //

  inline
  access::object_traits< ::position >::id_type
  access::object_traits< ::position >::
  id (const object_type&)
  {
  }

  inline
  void access::object_traits< ::position >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::position >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // department
  //

  inline
  access::object_traits< ::department >::id_type
  access::object_traits< ::department >::
  id (const object_type& o)
  {
    return o.id;
  }

  inline
  void access::object_traits< ::department >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::department >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // AbstractEmployee
  //

  inline
  access::object_traits< ::AbstractEmployee >::id_type
  access::object_traits< ::AbstractEmployee >::
  id (const object_type& o)
  {
    return o.id;
  }

  // Employee
  //

  inline
  access::object_traits< ::Employee >::id_type
  access::object_traits< ::Employee >::
  id (const object_type& o)
  {
    return object_traits< ::AbstractEmployee >::id (o);
  }

  inline
  void access::object_traits< ::Employee >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::Employee >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Manager
  //

  inline
  access::object_traits< ::Manager >::id_type
  access::object_traits< ::Manager >::
  id (const object_type& o)
  {
    return object_traits< ::AbstractEmployee >::id (o);
  }

  // Sales
  //

  inline
  access::object_traits< ::Sales >::id_type
  access::object_traits< ::Sales >::
  id (const object_type& o)
  {
    return object_traits< ::AbstractEmployee >::id (o);
  }
}

namespace odb
{
  // position
  //

  // department
  //

  inline
  void access::object_traits_impl< ::department, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::department, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // AbstractEmployee
  //

  // Employee
  //

  inline
  access::object_traits_impl< ::Employee, id_sqlite >::id_type
  access::object_traits_impl< ::Employee, id_sqlite >::
  id (const id_image_type& i)
  {
    return object_traits_impl< ::AbstractEmployee, id_sqlite >::id (i);
  }

  inline
  access::object_traits_impl< ::Employee, id_sqlite >::id_type
  access::object_traits_impl< ::Employee, id_sqlite >::
  id (const image_type& i)
  {
    return object_traits_impl< ::AbstractEmployee, id_sqlite >::id (i);
  }

  inline
  void access::object_traits_impl< ::Employee, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::AbstractEmployee, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::Employee, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::AbstractEmployee, id_sqlite >::init (i, id);
  }

  inline
  void access::object_traits_impl< ::Employee, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::Employee, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // Manager
  //

  inline
  access::object_traits_impl< ::Manager, id_sqlite >::id_type
  access::object_traits_impl< ::Manager, id_sqlite >::
  id (const id_image_type& i)
  {
    return object_traits_impl< ::AbstractEmployee, id_sqlite >::id (i);
  }

  inline
  access::object_traits_impl< ::Manager, id_sqlite >::id_type
  access::object_traits_impl< ::Manager, id_sqlite >::
  id (const image_type& i)
  {
    return object_traits_impl< ::AbstractEmployee, id_sqlite >::id (i);
  }

  inline
  void access::object_traits_impl< ::Manager, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::AbstractEmployee, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::Manager, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::AbstractEmployee, id_sqlite >::init (i, id);
  }

  // Sales
  //

  inline
  access::object_traits_impl< ::Sales, id_sqlite >::id_type
  access::object_traits_impl< ::Sales, id_sqlite >::
  id (const id_image_type& i)
  {
    return object_traits_impl< ::AbstractEmployee, id_sqlite >::id (i);
  }

  inline
  access::object_traits_impl< ::Sales, id_sqlite >::id_type
  access::object_traits_impl< ::Sales, id_sqlite >::
  id (const image_type& i)
  {
    return object_traits_impl< ::AbstractEmployee, id_sqlite >::id (i);
  }

  inline
  void access::object_traits_impl< ::Sales, id_sqlite >::
  bind (sqlite::bind* b, id_image_type& i)
  {
    object_traits_impl< ::AbstractEmployee, id_sqlite >::bind (b, i);
  }

  inline
  void access::object_traits_impl< ::Sales, id_sqlite >::
  init (id_image_type& i, const id_type& id)
  {
    object_traits_impl< ::AbstractEmployee, id_sqlite >::init (i, id);
  }
}

