// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef EMPLOYEE_ODB_HXX
#define EMPLOYEE_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "employee.hxx"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>
#include <odb/no-id-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // position
  //
  template <>
  struct class_traits< ::position >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::position >
  {
    public:
    typedef ::position object_type;
    typedef ::position* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef void id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_id_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_id_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // department
  //
  template <>
  struct class_traits< ::department >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::department >
  {
    public:
    typedef ::department object_type;
    typedef ::department* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::std::size_t id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // employee
  //
  template <>
  struct class_traits< ::employee >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::employee >
  {
    public:
    typedef ::employee object_type;
    typedef ::employee* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::std::size_t id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // manager
  //
  template <>
  struct class_traits< ::manager >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::manager >
  {
    public:
    typedef ::manager object_type;
    typedef ::manager* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::std::size_t id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // sales
  //
  template <>
  struct class_traits< ::sales >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::sales >
  {
    public:
    typedef ::sales object_type;
    typedef ::sales* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::std::size_t id_type;

    static const bool auto_id = false;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/sqlite/version.hxx>
#include <odb/sqlite/forward.hxx>
#include <odb/sqlite/binding.hxx>
#include <odb/sqlite/sqlite-types.hxx>
#include <odb/sqlite/query.hxx>

namespace odb
{
  // position
  //
  template <typename A>
  struct pointer_query_columns< ::position, id_sqlite, A >
  {
    // employee_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::size_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    employee_id_type_;

    static const employee_id_type_ employee_id;

    // department_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::size_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    department_id_type_;

    static const department_id_type_ department_id;
  };

  template <typename A>
  const typename pointer_query_columns< ::position, id_sqlite, A >::employee_id_type_
  pointer_query_columns< ::position, id_sqlite, A >::
  employee_id (A::table_name, "\"employee_id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::position, id_sqlite, A >::department_id_type_
  pointer_query_columns< ::position, id_sqlite, A >::
  department_id (A::table_name, "\"department_id\"", 0);

  template <>
  class access::object_traits_impl< ::position, id_sqlite >:
    public access::object_traits< ::position >
  {
    public:
    struct image_type
    {
      // employee_id
      //
      long long employee_id_value;
      bool employee_id_null;

      // department_id
      //
      long long department_id_value;
      bool department_id_null;

      std::size_t version;
    };

    struct department_id_tag;

    using object_traits<object_type>::id;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    typedef sqlite::no_id_object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 2UL;
    static const std::size_t id_column_count = 0UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
  };

  template <>
  class access::object_traits_impl< ::position, id_common >:
    public access::object_traits_impl< ::position, id_sqlite >
  {
  };

  // department
  //
  template <typename A>
  struct query_columns< ::department, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::size_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // name
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    name_type_;

    static const name_type_ name;
  };

  template <typename A>
  const typename query_columns< ::department, id_sqlite, A >::id_type_
  query_columns< ::department, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::department, id_sqlite, A >::name_type_
  query_columns< ::department, id_sqlite, A >::
  name (A::table_name, "\"name\"", 0);

  template <typename A>
  struct pointer_query_columns< ::department, id_sqlite, A >:
    query_columns< ::department, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::department, id_sqlite >:
    public access::object_traits< ::department >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      bool id_null;

      // name
      //
      details::buffer name_value;
      std::size_t name_size;
      bool name_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 2UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::department, id_common >:
    public access::object_traits_impl< ::department, id_sqlite >
  {
  };

  // employee
  //
  template <typename A>
  struct query_columns< ::employee, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::size_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // firstname
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    firstname_type_;

    static const firstname_type_ firstname;

    // lastname
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    lastname_type_;

    static const lastname_type_ lastname;

    // hire_date
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::time_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    hire_date_type_;

    static const hire_date_type_ hire_date;

    // base_rate
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    base_rate_type_;

    static const base_rate_type_ base_rate;
  };

  template <typename A>
  const typename query_columns< ::employee, id_sqlite, A >::id_type_
  query_columns< ::employee, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::employee, id_sqlite, A >::firstname_type_
  query_columns< ::employee, id_sqlite, A >::
  firstname (A::table_name, "\"firstname\"", 0);

  template <typename A>
  const typename query_columns< ::employee, id_sqlite, A >::lastname_type_
  query_columns< ::employee, id_sqlite, A >::
  lastname (A::table_name, "\"lastname\"", 0);

  template <typename A>
  const typename query_columns< ::employee, id_sqlite, A >::hire_date_type_
  query_columns< ::employee, id_sqlite, A >::
  hire_date (A::table_name, "\"hire_date\"", 0);

  template <typename A>
  const typename query_columns< ::employee, id_sqlite, A >::base_rate_type_
  query_columns< ::employee, id_sqlite, A >::
  base_rate (A::table_name, "\"base_rate\"", 0);

  template <typename A>
  struct pointer_query_columns< ::employee, id_sqlite, A >:
    query_columns< ::employee, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::employee, id_sqlite >:
    public access::object_traits< ::employee >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      bool id_null;

      // firstname
      //
      details::buffer firstname_value;
      std::size_t firstname_size;
      bool firstname_null;

      // lastname
      //
      details::buffer lastname_value;
      std::size_t lastname_size;
      bool lastname_null;

      // hire_date
      //
      long long hire_date_value;
      bool hire_date_null;

      // base_rate
      //
      double base_rate_value;
      bool base_rate_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 5UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::employee, id_common >:
    public access::object_traits_impl< ::employee, id_sqlite >
  {
  };

  // manager
  //
  template <typename A>
  struct query_columns< ::manager, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::size_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // firstname
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    firstname_type_;

    static const firstname_type_ firstname;

    // lastname
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    lastname_type_;

    static const lastname_type_ lastname;

    // hire_date
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::time_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    hire_date_type_;

    static const hire_date_type_ hire_date;

    // base_rate
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    base_rate_type_;

    static const base_rate_type_ base_rate;
  };

  template <typename A>
  const typename query_columns< ::manager, id_sqlite, A >::id_type_
  query_columns< ::manager, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::manager, id_sqlite, A >::firstname_type_
  query_columns< ::manager, id_sqlite, A >::
  firstname (A::table_name, "\"firstname\"", 0);

  template <typename A>
  const typename query_columns< ::manager, id_sqlite, A >::lastname_type_
  query_columns< ::manager, id_sqlite, A >::
  lastname (A::table_name, "\"lastname\"", 0);

  template <typename A>
  const typename query_columns< ::manager, id_sqlite, A >::hire_date_type_
  query_columns< ::manager, id_sqlite, A >::
  hire_date (A::table_name, "\"hire_date\"", 0);

  template <typename A>
  const typename query_columns< ::manager, id_sqlite, A >::base_rate_type_
  query_columns< ::manager, id_sqlite, A >::
  base_rate (A::table_name, "\"base_rate\"", 0);

  template <typename A>
  struct pointer_query_columns< ::manager, id_sqlite, A >:
    query_columns< ::manager, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::manager, id_sqlite >:
    public access::object_traits< ::manager >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      bool id_null;

      // firstname
      //
      details::buffer firstname_value;
      std::size_t firstname_size;
      bool firstname_null;

      // lastname
      //
      details::buffer lastname_value;
      std::size_t lastname_size;
      bool lastname_null;

      // hire_date
      //
      long long hire_date_value;
      bool hire_date_null;

      // base_rate
      //
      double base_rate_value;
      bool base_rate_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 5UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::manager, id_common >:
    public access::object_traits_impl< ::manager, id_sqlite >
  {
  };

  // sales
  //
  template <typename A>
  struct query_columns< ::sales, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::size_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // firstname
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    firstname_type_;

    static const firstname_type_ firstname;

    // lastname
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    lastname_type_;

    static const lastname_type_ lastname;

    // hire_date
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::time_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    hire_date_type_;

    static const hire_date_type_ hire_date;

    // base_rate
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        double,
        sqlite::id_real >::query_type,
      sqlite::id_real >
    base_rate_type_;

    static const base_rate_type_ base_rate;
  };

  template <typename A>
  const typename query_columns< ::sales, id_sqlite, A >::id_type_
  query_columns< ::sales, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::sales, id_sqlite, A >::firstname_type_
  query_columns< ::sales, id_sqlite, A >::
  firstname (A::table_name, "\"firstname\"", 0);

  template <typename A>
  const typename query_columns< ::sales, id_sqlite, A >::lastname_type_
  query_columns< ::sales, id_sqlite, A >::
  lastname (A::table_name, "\"lastname\"", 0);

  template <typename A>
  const typename query_columns< ::sales, id_sqlite, A >::hire_date_type_
  query_columns< ::sales, id_sqlite, A >::
  hire_date (A::table_name, "\"hire_date\"", 0);

  template <typename A>
  const typename query_columns< ::sales, id_sqlite, A >::base_rate_type_
  query_columns< ::sales, id_sqlite, A >::
  base_rate (A::table_name, "\"base_rate\"", 0);

  template <typename A>
  struct pointer_query_columns< ::sales, id_sqlite, A >:
    query_columns< ::sales, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::sales, id_sqlite >:
    public access::object_traits< ::sales >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id
      //
      long long id_value;
      bool id_null;

      // firstname
      //
      details::buffer firstname_value;
      std::size_t firstname_size;
      bool firstname_null;

      // lastname
      //
      details::buffer lastname_value;
      std::size_t lastname_size;
      bool lastname_null;

      // hire_date
      //
      long long hire_date_value;
      bool hire_date_null;

      // base_rate
      //
      double base_rate_value;
      bool base_rate_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 5UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, const object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::sales, id_common >:
    public access::object_traits_impl< ::sales, id_sqlite >
  {
  };

  // position
  //
  template <>
  struct alias_traits<
    ::department,
    id_sqlite,
    access::object_traits_impl< ::position, id_sqlite >::department_id_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::position, id_sqlite >
  {
    // department_id
    //
    typedef
    odb::alias_traits<
      ::department,
      id_sqlite,
      access::object_traits_impl< ::position, id_sqlite >::department_id_tag>
    department_id_alias_;
  };

  template <typename A>
  struct query_columns< ::position, id_sqlite, A >:
    query_columns_base< ::position, id_sqlite >
  {
    // employee_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::size_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    employee_id_type_;

    static const employee_id_type_ employee_id;

    // department_id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::size_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    department_id_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::department,
        id_sqlite,
        department_id_alias_ > >
    department_id_pointer_type_;

    struct department_id_type_: department_id_pointer_type_, department_id_column_type_
    {
      department_id_type_ (const char* t, const char* c, const char* conv)
        : department_id_column_type_ (t, c, conv)
      {
      }
    };

    static const department_id_type_ department_id;
  };

  template <typename A>
  const typename query_columns< ::position, id_sqlite, A >::employee_id_type_
  query_columns< ::position, id_sqlite, A >::
  employee_id (A::table_name, "\"employee_id\"", 0);

  template <typename A>
  const typename query_columns< ::position, id_sqlite, A >::department_id_type_
  query_columns< ::position, id_sqlite, A >::
  department_id (A::table_name, "\"department_id\"", 0);

  // department
  //
  // employee
  //
  // manager
  //
  // sales
  //
}

#include "employee-odb.ixx"

#include <odb/post.hxx>

#endif // EMPLOYEE_ODB_HXX
